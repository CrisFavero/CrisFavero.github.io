<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cris Favero (Posts about administrative)</title><link>http://0.0.0.0:8000/</link><description></description><atom:link href="http://0.0.0.0:8000/categories/cat_administrative.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:cris@crisfavero.com"&gt;Cris Favero&lt;/a&gt; </copyright><lastBuildDate>Fri, 19 Apr 2019 19:01:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Quickly Import Flat-File Data into MySQL</title><link>http://0.0.0.0:8000/blog/quickly-import-flat-file-data-into-mysql/</link><dc:creator>Cris Favero</dc:creator><description>&lt;div&gt;&lt;p&gt;Firstly, this assumes that your input is a tab separated file with no quoting of fields. This obviously also implies your data can not have tabs in it. if you have a simple CSV you may have luck replacing the t on line 11 with a , to import CSV files.&lt;/p&gt;
&lt;p&gt;Secondly, rather than intelligently trying to guess or ask for data types to create the table this assumes text type, which you can than more quickly convert in mysql into more appropriate fields. Alternatively you can manually create a more appropriate table first and comment out lines 6 and 7.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-1"&gt;&lt;/a&gt;&lt;span class="nv"&gt;SOURCE_TAB_SEPARATED_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'input_file.tsv'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'batch_import.sql'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;BATCH_SIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;INSERT_SIGNATURE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'INSERT INTO tmp_batch_insert '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#write create table statement using  first line to determine number of columns \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-6"&gt;&lt;/a&gt;head -n1 &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SOURCE_TAB_SEPARATED_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-7"&gt;&lt;/a&gt;awk -F&lt;span class="s1"&gt;'\t'&lt;/span&gt; &lt;span class="s1"&gt;'BEGIN{printf "CREATE TABLE tmp_batch_insert("} { for(i = 1; i &amp;lt;= NF; i++) { printf "f"i" text," } }'&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;awk &lt;span class="s1"&gt;'{gsub(/,$/, ");"); print}'&lt;/span&gt;&amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#start writing actual files \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-9"&gt;&lt;/a&gt;cat &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SOURCE_TAB_SEPARATED_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Replace tabs with: double-quote comma double-quote. \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-11"&gt;&lt;/a&gt;awk &lt;span class="s1"&gt;'{gsub(/\t/, "\",\""); print}'&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-12"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# To beginning of the line add: open-parentheses double-quote. \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-13"&gt;&lt;/a&gt;awk &lt;span class="s1"&gt;'{gsub(/^/, "(\""); print}'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-14"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# To the end of the line add: double-quote closed-parentheses. \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-15"&gt;&lt;/a&gt;awk &lt;span class="s1"&gt;'{gsub(/$/, "\")"); print}'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-16"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# For-each: print the entire line with a comma. Every $BATCH_SIZE line start with the $INSERT_SIGNATURE and use a semicolon instead of a comma. Start the first line with the $INSERT_SIGNATURE. \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-17"&gt;&lt;/a&gt;awk -v &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BATCH_SIZE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="s1"&gt;'NR % n != 1 &amp;amp;&amp;amp; NR % n != 0  {print $0","} ;NR % n == 0 {print $0";"};NR % n == 1 {print "'&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INSERT_SIGNATURE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s1"&gt;' VALUES \n"$0","}'&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-18"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# replace trailing comma with a semicolon \&lt;/span&gt;
&lt;a name="rest_code_ecda79e42d024c5ba9791baf8fc6ea87-19"&gt;&lt;/a&gt;sed &lt;span class="s1"&gt;'$ s/,$/;/'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;"tmp.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv &lt;span class="s2"&gt;"tmp.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DESTINATION_SQL_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;While there are many other ways this can be done, some potentially cleaner, it gets the job done and in a fairly efficient manner with regards to MySQL.&lt;/p&gt;&lt;/div&gt;</description><category>blog</category><category>demo</category><category>nikola</category><category>python</category><guid>http://0.0.0.0:8000/blog/quickly-import-flat-file-data-into-mysql/</guid><pubDate>Thu, 17 Mar 2016 05:00:00 GMT</pubDate></item></channel></rss>